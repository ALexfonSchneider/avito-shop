// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package merch_test is a generated GoMock package.
package merch_test

import (
	context "context"
	reflect "reflect"

	merch "github.com/ALexfonSchneider/avito-shop/internal/domain/merch"
	user "github.com/ALexfonSchneider/avito-shop/internal/domain/user"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindUserByID mocks base method.
func (m *MockUserRepository) FindUserByID(ctx context.Context, ID string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, ID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryMockRecorder) FindUserByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepository)(nil).FindUserByID), ctx, ID)
}

// IncrementUserBalance mocks base method.
func (m *MockUserRepository) IncrementUserBalance(ctx context.Context, ID string, points int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementUserBalance", ctx, ID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementUserBalance indicates an expected call of IncrementUserBalance.
func (mr *MockUserRepositoryMockRecorder) IncrementUserBalance(ctx, ID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementUserBalance", reflect.TypeOf((*MockUserRepository)(nil).IncrementUserBalance), ctx, ID, points)
}

// MockMerchRepository is a mock of MerchRepository interface.
type MockMerchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchRepositoryMockRecorder
}

// MockMerchRepositoryMockRecorder is the mock recorder for MockMerchRepository.
type MockMerchRepositoryMockRecorder struct {
	mock *MockMerchRepository
}

// NewMockMerchRepository creates a new mock instance.
func NewMockMerchRepository(ctrl *gomock.Controller) *MockMerchRepository {
	mock := &MockMerchRepository{ctrl: ctrl}
	mock.recorder = &MockMerchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchRepository) EXPECT() *MockMerchRepositoryMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method.
func (m *MockMerchRepository) CreatePurchase(ctx context.Context, merch *merch.Purchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", ctx, merch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockMerchRepositoryMockRecorder) CreatePurchase(ctx, merch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockMerchRepository)(nil).CreatePurchase), ctx, merch)
}

// FindMerchByName mocks base method.
func (m *MockMerchRepository) FindMerchByName(ctx context.Context, name string) (*merch.Merch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMerchByName", ctx, name)
	ret0, _ := ret[0].(*merch.Merch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMerchByName indicates an expected call of FindMerchByName.
func (mr *MockMerchRepositoryMockRecorder) FindMerchByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMerchByName", reflect.TypeOf((*MockMerchRepository)(nil).FindMerchByName), ctx, name)
}
